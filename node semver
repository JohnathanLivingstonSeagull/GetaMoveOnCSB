PACKAGE.JSON(5)                                                                                                                                                      PACKAGE.JSON(5)

NNAAMMEE
       ppaacckkaaggee..jjssoonn - Specifics of npm's package.json handling

   DDeessccrriippttiioonn
       This document is all you need to know about what's required in your package.json file. It must be actual JSON, not just a JavaScript object literal.

       A lot of the behavior described in this document is affected by the config settings described in npm help config.

   nnaammee
       If  you  plan to publish your package, the _m_o_s_t important things in your package.json are the name and version fields as they will be required. The name and version together
       form an identifier that is assumed to be completely unique. Changes to the package should come along with changes to the version. If you don't plan to publish your  package,
       the name and version fields are optional.

       The name is what your thing is called.

       Some rules:

       •   The name must be less than or equal to 214 characters. This includes the scope for scoped packages.

       •   The names of scoped packages can begin with a dot or an underscore. This is not permitted without a scope.

       •   New packages must not have uppercase letters in the name.

       •   The name ends up being part of a URL, an argument on the command line, and a folder name. Therefore, the name can't contain any non-URL-safe characters.

       Some tips:

       •   Don't use the same name as a core Node module.

       •   Don't  put  "js" or "node" in the name. It's assumed that it's js, since you're writing a package.json file, and you can specify the engine using the "eennggiinneess _(_e_n_g_i_n_e_s_)"
           field. (See below.)

       •   The name will probably be passed as an argument to require(), so it should be something short, but also reasonably descriptive.

       •   You may want to check the npm registry to see if there's something by that name already, before you get too attached to it. _⟨_h_t_t_p_s_:_/_/_w_w_w_._n_p_m_j_s_._c_o_m_/_⟩

       A name can be optionally prefixed by a scope, e.g. @@mmyyoorrgg//mmyyppaacckkaaggee. See npm help scope for more detail.

   vveerrssiioonn
       If you plan to publish your package, the _m_o_s_t important things in your package.json are the name and version fields as they will be required. The name and  version  together
       form  an identifier that is assumed to be completely unique. Changes to the package should come along with changes to the version. If you don't plan to publish your package,
       the name and version fields are optional.

       Version must be parseable by nnooddee--sseemmvveerr _⟨_h_t_t_p_s_:_/_/_g_i_t_h_u_b_._c_o_m_/_n_p_m_/_n_o_d_e_-_s_e_m_v_e_r_⟩, which is bundled with npm as a dependency. (nnppmm iinnssttaallll sseemmvveerr to use it yourself.)

   ddeessccrriippttiioonn
       Put a description in it. It's a string. This helps people discover your package, as it's listed in nnppmm sseeaarrcchh.

   kkeeyywwoorrddss
       Put keywords in it. It's an array of strings. This helps people discover your package as it's listed in nnppmm sseeaarrcchh.

   hhoommeeppaaggee
       The URL to the project homepage.

       Example:

         "homepage": "https://github.com/owner/project#readme"

   bbuuggss
       The URL to your project's issue tracker and / or the email address to which issues should be reported. These are helpful for people who encounter issues with your package.

       It should look like this:

         {
           "bugs": {
             "url": "https://github.com/owner/project/issues",
             "email": "project@hostname.com"
           }
         }

       You can specify either one or both values. If you want to provide only a URL, you can specify the value for "bugs" as a simple string instead of an object.

       If a URL is provided, it will be used by the nnppmm bbuuggss command.

   lliicceennssee
       You should specify a license for your package so that people know how they are permitted to use it, and any restrictions you're placing on it.

       If you're using a common license such as BSD-2-Clause or MIT, add a current SPDX license identifier for the license you're using, like this:

         {
           "license" : "BSD-3-Clause"
         }

       You can check tthhee ffuullll lliisstt ooff SSPPDDXX lliicceennssee IIDDss _⟨_h_t_t_p_s_:_/_/_s_p_d_x_._o_r_g_/_l_i_c_e_n_s_e_s_/_⟩. Ideally you should pick one that is OOSSII _⟨_h_t_t_p_s_:_/_/_o_p_e_n_s_o_u_r_c_e_._o_r_g_/_l_i_c_e_n_s_e_s_/_⟩ approved.

       If your package is licensed under multiple common licenses, use an SSPPDDXX lliicceennssee eexxpprreessssiioonn ssyynnttaaxx vveerrssiioonn 22..00 ssttrriinngg _⟨_h_t_t_p_s_:_/_/_s_p_d_x_._d_e_v_/_s_p_e_c_i_f_i_c_a_t_i_o_n_s_/_⟩, like this:

         {
           "license" : "(ISC OR GPL-3.0)"
         }

       If you are using a license that hasn't been assigned an SPDX identifier, or if you are using a custom license, use a string value like this one:

         {
           "license" : "SEE LICENSE IN <filename>"
         }

       Then include a file named <<ffiilleennaammee>> at the top level of the package.

       Some old packages used license objects or a "licenses" property containing an array of license objects:

         // Not valid metadata
         {
           "license" : {
             "type" : "ISC",
             "url" : "https://opensource.org/licenses/ISC"
           }
         }

         // Not valid metadata
         {
           "licenses" : [
             {
               "type": "MIT",
               "url": "https://www.opensource.org/licenses/mit-license.php"
             },
             {
               "type": "Apache-2.0",
               "url": "https://opensource.org/licenses/apache2.0.php"
             }
           ]
         }

       Those styles are now deprecated. Instead, use SPDX expressions, like this:

         {
           "license": "ISC"
         }

         {
           "license": "(MIT OR Apache-2.0)"
         }

       Finally, if you do not wish to grant others the right to use a private or unpublished package under any terms:

         {
           "license": "UNLICENSED"
         }

       Consider also setting ""pprriivvaattee"":: ttrruuee to prevent accidental publication.

   ppeeooppllee ffiieellddss:: aauutthhoorr,, ccoonnttrriibbuuttoorrss
       The "author" is one person. "contributors" is an array of people. A "person" is an object with a "name" field and optionally "url" and "email", like this:

         {
           "name" : "Barney Rubble",
           "email" : "b@rubble.com",
           "url" : "http://barnyrubble.tumblr.com/"
         }

       Or you can shorten that all into a single string, and npm will parse it for you:

         {
           "author": "Barney Rubble <b@rubble.com> (http://barnyrubble.tumblr.com/)"
         }

       Both email and url are optional either way.

       npm also sets a top-level "maintainers" field with your npm user info.

   ffuunnddiinngg
       You can specify an object containing a URL that provides up-to-date information about ways to help fund development of your package, or a string URL, or an array of these:

         {
           "funding": {
             "type" : "individual",
             "url" : "http://example.com/donate"
           },

           "funding": {
             "type" : "patreon",
             "url" : "https://www.patreon.com/my-account"
           },

           "funding": "http://example.com/donate",

           "funding": [
             {
               "type" : "individual",
               "url" : "http://example.com/donate"
             },
             "http://example.com/donateAlso",
             {
               "type" : "patreon",
               "url" : "https://www.patreon.com/my-account"
             }
           ]
         }

       Users can use the nnppmm ffuunndd subcommand to list the ffuunnddiinngg URLs of all dependencies of their project, direct and indirect. A shortcut to visit each funding url is also avail‐
       able when providing the project name such as: nnppmm ffuunndd <<pprroojjeeccttnnaammee>> (when there are multiple URLs, the first one will be visited)

   ffiilleess
       The  optional ffiilleess field is an array of file patterns that describes the entries to be included when your package is installed as a dependency. File patterns follow a simi‐
       lar syntax to ..ggiittiiggnnoorree, but reversed: including a file, directory, or glob pattern (**, ****//**, and such) will make it so that file is  included  in  the  tarball  when  it's
       packed. Omitting the field will make it default to [[""**""]], which means it will include all files.

       Some special files and directories are also included or excluded regardless of whether they exist in the ffiilleess array (see below).

       You  can  also provide a ..nnppmmiiggnnoorree file in the root of your package or in subdirectories, which will keep files from being included. At the root of your package it will not
       override the "files" field, but in subdirectories it will. The ..nnppmmiiggnnoorree file works just like a ..ggiittiiggnnoorree. If there is a ..ggiittiiggnnoorree file, and ..nnppmmiiggnnoorree is missing,  ..ggiitt‐‐
       iiggnnoorree's contents will be used instead.

       Certain files are always included, regardless of settings:

       •   ppaacckkaaggee..jjssoonn

       •   RREEAADDMMEE

       •   LLIICCEENNSSEE / LLIICCEENNCCEE

       •   The file in the "main" field

       •   The file(s) in the "bin" field

       RREEAADDMMEE & LLIICCEENNSSEE can have any case and extension.

       Some files are always ignored by default:

       •   **..oorriigg

       •   ..**..sswwpp

       •   ..DDSS__SSttoorree

       •   ..__**

       •   ..ggiitt

       •   ..hhgg

       •   ..lloocckk--wwssccrriipptt

       •   ..nnppmmrrcc

       •   ..ssvvnn

       •   ..wwaaffppiicckkllee--NN

       •   CCVVSS

       •   ccoonnffiigg..ggyyppii

       •   nnooddee__mmoodduulleess

       •   nnppmm--ddeebbuugg..lloogg

       •   ppaacckkaaggee--lloocckk..jjssoonn (use nnppmm--sshhrriinnkkwwrraapp..jjssoonn _⟨_/_c_o_n_f_i_g_u_r_i_n_g_-_n_p_m_/_n_p_m_-_s_h_r_i_n_k_w_r_a_p_-_j_s_o_n_⟩ if you wish it to be published)

       •   ppnnppmm--lloocckk..yyaammll

       •   yyaarrnn..lloocckk

       Most of these ignored files can be included specifically if included in the ffiilleess globs. Exceptions to this are:

       •   ..ggiitt

       •   ..nnppmmrrcc

       •   nnooddee__mmoodduulleess

       •   ppaacckkaaggee--lloocckk..jjssoonn

       •   ppnnppmm--lloocckk..yyaammll

       •   yyaarrnn..lloocckk

       These can not be included.

   mmaaiinn
       The  main  field is a module ID that is the primary entry point to your program. That is, if your package is named ffoooo, and a user installs it, and then does rreeqquuiirree((""ffoooo"")),
       then your main module's exports object will be returned.

       This should be a module relative to the root of your package folder.

       For most modules, it makes the most sense to have a main script and often not much else.

       If mmaaiinn is not set, it defaults to iinnddeexx..jjss in the package's root folder.

   bbrroowwsseerr
       If your module is meant to be used client-side the browser field should be used instead of the main field. This is helpful to hint users that it  might  rely  on  primitives
       that aren't available in Node.js modules. (e.g. wwiinnddooww)

   bbiinn
       A lot of packages have one or more executable files that they'd like to install into the PATH. npm makes this pretty easy (in fact, it uses this feature to install the "npm"
       executable.)

       To use this, supply a bbiinn field in your package.json which is a map of command name to local file name. When this package is installed globally, that  file  will  be  either
       linked inside the global bins directory or a cmd (Windows Command File) will be created which executes the specified file in the bbiinn field, so it is available to run by nnaammee
       or nnaammee..ccmmdd (on Windows PowerShell). When this package is installed as a dependency in another package, the file will be linked where it will be available  to  that  package
       either directly by nnppmm eexxeecc or by name in other scripts when invoking them via nnppmm rruunn--ssccrriipptt.

       For example, myapp could have this:

         {
           "bin": {
             "myapp": "bin/cli.js"
           }
         }

       So,  when  you  install myapp, in case of unix-like OS it'll create a symlink from the ccllii..jjss script to //uussrr//llooccaall//bbiinn//mmyyaapppp and in case of windows it will create a cmd file
       usually at CC::\\UUsseerrss\\{{UUsseerrnnaammee}}\\AAppppDDaattaa\\RRooaammiinngg\\nnppmm\\mmyyaapppp..ccmmdd which runs the ccllii..jjss script.

       If you have a single executable, and its name should be the name of the package, then you can just supply it as a string. For example:

         {
           "name": "my-program",
           "version": "1.2.5",
           "bin": "path/to/program"
         }

       would be the same as this:

         {
           "name": "my-program",
           "version": "1.2.5",
           "bin": {
             "my-program": "path/to/program"
           }
         }

       Please make sure that your file(s) referenced in bbiinn starts with ##!!//uussrr//bbiinn//eennvv nnooddee, otherwise the scripts are started without the node executable!

       Note that you can also set the executable files using ddiirreeccttoorriieess..bbiinn _(_d_i_r_e_c_t_o_r_i_e_s_._b_i_n_).

       See ffoollddeerrss _⟨_/_c_o_n_f_i_g_u_r_i_n_g_-_n_p_m_/_f_o_l_d_e_r_s_#_e_x_e_c_u_t_a_b_l_e_s_⟩ for more info on executables.

   mmaann
       Specify either a single file or an array of filenames to put in place for the mmaann program to find.

       If only a single file is provided, then it's installed such that it is the result from mmaann <<ppkkggnnaammee>>, regardless of its actual filename. For example:

         {
           "name": "foo",
           "version": "1.2.3",
           "description": "A packaged foo fooer for fooing foos",
           "main": "foo.js",
           "man": "./man/doc.1"
         }

       would link the ..//mmaann//ddoocc..11 file in such that it is the target for mmaann ffoooo

       If the filename doesn't start with the package name, then it's prefixed. So, this:

         {
           "name": "foo",
           "version": "1.2.3",
           "description": "A packaged foo fooer for fooing foos",
           "main": "foo.js",
           "man": [
             "./man/foo.1",
             "./man/bar.1"
           ]
         }

       will create files to do mmaann ffoooo and mmaann ffoooo--bbaarr.

       Man files must end with a number, and optionally a ..ggzz suffix if they are compressed. The number dictates which man section the file is installed into.

         {
           "name": "foo",
           "version": "1.2.3",
           "description": "A packaged foo fooer for fooing foos",
           "main": "foo.js",
           "man": [
             "./man/foo.1",
             "./man/foo.2"
           ]
         }

       will create entries for mmaann ffoooo and mmaann 22 ffoooo

   ddiirreeccttoorriieess
       The CommonJS PPaacckkaaggeess _⟨_h_t_t_p_:_/_/_w_i_k_i_._c_o_m_m_o_n_j_s_._o_r_g_/_w_i_k_i_/_P_a_c_k_a_g_e_s_/_1_._0_⟩ spec details a few ways that you can indicate the structure of your package using a ddiirreeccttoorriieess object. If
       you look at nnppmm''ss ppaacckkaaggee..jjssoonn _⟨_h_t_t_p_s_:_/_/_r_e_g_i_s_t_r_y_._n_p_m_j_s_._o_r_g_/_n_p_m_/_l_a_t_e_s_t_⟩, you'll see that it has directories for doc, lib, and man.

       In the future, this information may be used in other creative ways.

   ddiirreeccttoorriieess..bbiinn
       If you specify a bbiinn directory in ddiirreeccttoorriieess..bbiinn, all the files in that folder will be added.

       Because of the way the bbiinn directive works, specifying both a bbiinn path and setting ddiirreeccttoorriieess..bbiinn is an error. If you want to specify individual files, use bbiinn, and for all
       the files in an existing bbiinn directory, use ddiirreeccttoorriieess..bbiinn.

   ddiirreeccttoorriieess..mmaann
       A folder that is full of man pages. Sugar to generate a "man" array by walking the folder.

   rreeppoossiittoorryy
       Specify the place where your code lives. This is helpful for people who want to contribute. If the git repo is on GitHub, then the nnppmm rreeppoo command will be able to find you.

       Do it like this:

         {
           "repository": {
             "type": "git",
             "url": "https://github.com/npm/cli.git"
           }
         }

       The URL should be a publicly available (perhaps read-only) URL that can be handed directly to a VCS program without any modification. It should not  be  a  URL  to  an  html
       project page that you put in your browser. It's for computers.

       For GitHub, GitHub gist, Bitbucket, or GitLab repositories you can use the same shortcut syntax you use for nnppmm iinnssttaallll:

         {
           "repository": "npm/npm",

           "repository": "github:user/repo",

           "repository": "gist:11081aaa281",

           "repository": "bitbucket:user/repo",

           "repository": "gitlab:user/repo"
         }

       If the ppaacckkaaggee..jjssoonn for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives:

         {
           "repository": {
             "type": "git",
             "url": "https://github.com/facebook/react.git",
             "directory": "packages/react-dom"
           }
         }

   ssccrriippttss
       The  "scripts"  property  is  a dictionary containing script commands that are run at various times in the lifecycle of your package. The key is the lifecycle event, and the
       value is the command to run at that point.

       See npm help scripts to find out more about writing package scripts.

   ccoonnffiigg
       A "config" object can be used to set configuration parameters used in package scripts that persist across upgrades. For instance, if a package had the following:

         {
           "name": "foo",
           "config": {
             "port": "8080"
           }
         }

       It could also have a "start" command that referenced the nnppmm__ppaacckkaaggee__ccoonnffiigg__ppoorrtt environment variable.

   ddeeppeennddeenncciieess
       Dependencies are specified in a simple object that maps a package name to a version range. The version range is a string which has one or more  space-separated  descriptors.
       Dependencies can also be identified with a tarball or git URL.

       PPlleeaassee ddoo nnoott ppuutt tteesstt hhaarrnneesssseess oorr ttrraannssppiilleerrss oorr ootthheerr ""ddeevveellooppmmeenntt"" ttiimmee ttoooollss iinn yyoouurr ddeeppeennddeenncciieess oobbjjeecctt.. See ddeevvDDeeppeennddeenncciieess, below.

       See sseemmvveerr _⟨_h_t_t_p_s_:_/_/_g_i_t_h_u_b_._c_o_m_/_n_p_m_/_n_o_d_e_-_s_e_m_v_e_r_#_v_e_r_s_i_o_n_s_⟩ for more details about specifying version ranges.

       •   vveerrssiioonn Must match vveerrssiioonn exactly

       •   >>vveerrssiioonn Must be greater than vveerrssiioonn

       •   >>==vveerrssiioonn etc

       •   <<vveerrssiioonn

       •   <<==vveerrssiioonn

       •   ~~vveerrssiioonn "Approximately equivalent to version" See sseemmvveerr _⟨_h_t_t_p_s_:_/_/_g_i_t_h_u_b_._c_o_m_/_n_p_m_/_n_o_d_e_-_s_e_m_v_e_r_#_v_e_r_s_i_o_n_s_⟩

       •   ^^vveerrssiioonn "Compatible with version" See sseemmvveerr _⟨_h_t_t_p_s_:_/_/_g_i_t_h_u_b_._c_o_m_/_n_p_m_/_n_o_d_e_-_s_e_m_v_e_r_#_v_e_r_s_i_o_n_s_⟩

       •   11..22..xx 1.2.0, 1.2.1, etc., but not 1.3.0

       •   hhttttpp::////...... See 'URLs as Dependencies' below

       •   ** Matches any version

       •   """" (just an empty string) Same as **

       •   vveerrssiioonn11 -- vveerrssiioonn22 Same as >>==vveerrssiioonn11 <<==vveerrssiioonn22.

       •   rraannggee11 |||| rraannggee22 Passes if either range1 or range2 are satisfied.

       •   ggiitt...... See 'Git URLs as Dependencies' below

       •   uusseerr//rreeppoo See 'GitHub URLs' below

       •   ttaagg A specific version tagged and published as ttaagg See npm help dist-tag

       •   ppaatthh//ppaatthh//ppaatthh See LLooccaall PPaatthhss _(_L_o_c_a_l _P_a_t_h_s_) below

       For example, these are all valid:

         {
           "dependencies": {
             "foo": "1.0.0 - 2.9999.9999",
             "bar": ">=1.0.2 <2.1.2",
             "baz": ">1.0.2 <=2.3.4",
             "boo": "2.0.1",
             "qux": "<1.0.0 || >=2.3.1 <2.4.5 || >=2.5.2 <3.0.0",
             "asd": "http://asdf.com/asdf.tar.gz",
             "til": "~1.2",
             "elf": "~1.2.3",
             "two": "2.x",
             "thr": "3.3.x",
             "lat": "latest",
             "dyl": "file:../dyl"
           }
         }

   UURRLLss aass DDeeppeennddeenncciieess
       You may specify a tarball URL in place of a version range.

       This tarball will be downloaded and installed locally to your package at install time.

   GGiitt UURRLLss aass DDeeppeennddeenncciieess
       Git URLs are of the form:

         <protocol>://[<user>[:<password>]@]<hostname>[:<port>][:][/]<path>[#<commit-ish> | #semver:<semver>]

       <<pprroottooccooll>> is one of ggiitt, ggiitt++sssshh, ggiitt++hhttttpp, ggiitt++hhttttppss, or ggiitt++ffiillee.

       If  ##<<ccoommmmiitt--iisshh>> is provided, it will be used to clone exactly that commit. If the commit-ish has the format ##sseemmvveerr::<<sseemmvveerr>>, <<sseemmvveerr>> can be any valid semver range or ex‐
       act version, and npm will look for any tags or refs matching that range in the remote repository, much as it would for a registry dependency.  If  neither  ##<<ccoommmmiitt--iisshh>>  or
       ##sseemmvveerr::<<sseemmvveerr>> is specified, then the default branch is used.

       Examples:

         git+ssh://git@github.com:npm/cli.git#v1.0.27
         git+ssh://git@github.com:npm/cli#semver:^5.0
         git+https://isaacs@github.com/npm/cli.git
         git://github.com/npm/cli.git#v1.0.27

       When  installing  from  a  ggiitt repository, the presence of certain fields in the ppaacckkaaggee..jjssoonn will cause npm to believe it needs to perform a build. To do so your repository
       will be cloned into a temporary directory, all of its deps installed, relevant scripts run, and the resulting directory packed and installed.

       This flow will occur if your git dependency uses wwoorrkkssppaacceess, or if any of the following scripts are present:

       •   bbuuiilldd

       •   pprreeppaarree

       •   pprreeppaacckk

       •   pprreeiinnssttaallll

       •   iinnssttaallll

       •   ppoossttiinnssttaallll

       If your git repository includes pre-built artifacts, you will likely want to make sure that none of the above scripts are defined, or your dependency will be rebuilt for ev‐
       ery installation.

   GGiittHHuubb UURRLLss
       As of version 1.1.65, you can refer to GitHub URLs as just "foo": "user/foo-project". Just as with git URLs, a ccoommmmiitt--iisshh suffix can be included. For example:

         {
           "name": "foo",
           "version": "0.0.0",
           "dependencies": {
             "express": "expressjs/express",
             "mocha": "mochajs/mocha#4727d357ea",
             "module": "user/repo#feature\/branch"
           }
         }

   LLooccaall PPaatthhss
       As  of  version  2.0.0 you can provide a path to a local directory that contains a package. Local paths can be saved using nnppmm iinnssttaallll --SS or nnppmm iinnssttaallll ----ssaavvee, using any of
       these forms:

         ~/foo/bar
         /foo/bar

       in which case they will be normalized to a relative path and added to your ppaacckkaaggee..jjssoonn. For example:

         {
           "name": "baz",
           "dependencies": {
             "bar": "file:../foo/bar"
           }
         }

       This feature is helpful for local offline development and creating tests that require npm installing where you don't want to hit an external server, but should not  be  used
       when publishing your package to the public registry.

       _n_o_t_e:  Packages linked by local path will not have their own dependencies installed when nnppmm iinnssttaallll is ran in this case. You must run nnppmm iinnssttaallll from inside the local path
       itself.

   ddeevvDDeeppeennddeenncciieess
       If someone is planning on downloading and using your module in their program, then they probably don't want or need to download and build the external test or  documentation
       framework that you use.

       In this case, it's best to map these additional items in a ddeevvDDeeppeennddeenncciieess object.

       These  things will be installed when doing nnppmm lliinnkk or nnppmm iinnssttaallll from the root of a package, and can be managed like any other npm configuration param. See npm help config
       for more on the topic.

       For build steps that are not platform-specific, such as compiling CoffeeScript or other languages to JavaScript, use the pprreeppaarree script to do this,  and  make  the  required
       package a devDependency.

       For example:

         {
           "name": "ethopia-waza",
           "description": "a delightfully fruity coffee varietal",
           "version": "1.2.3",
           "devDependencies": {
             "coffee-script": "~1.6.3"
           },
           "scripts": {
             "prepare": "coffee -o lib/ -c src/waza.coffee"
           },
           "main": "lib/waza.js"
         }

       The  pprreeppaarree script will be run before publishing, so that users can consume the functionality without requiring them to compile it themselves. In dev mode (ie, locally run‐
       ning nnppmm iinnssttaallll), it'll run this script as well, so that you can test it easily.

   ppeeeerrDDeeppeennddeenncciieess
       In some cases, you want to express the compatibility of your package with a host tool or library, while not necessarily doing a rreeqquuiirree of this host.  This  is  usually  re‐
       ferred to as a _p_l_u_g_i_n. Notably, your module may be exposing a specific interface, expected and specified by the host documentation.

       For example:

         {
           "name": "tea-latte",
           "version": "1.3.5",
           "peerDependencies": {
             "tea": "2.x"
           }
         }

       This ensures your package tteeaa--llaattttee can be installed _a_l_o_n_g with the second major version of the host package tteeaa only. nnppmm iinnssttaallll tteeaa--llaattttee could possibly yield the follow‐
       ing dependency graph:

         ├── tea-latte@1.3.5
         └── tea@2.2.0

       In npm versions 3 through 6, ppeeeerrDDeeppeennddeenncciieess were not automatically installed, and would raise a warning if an invalid version of the peer dependency was found in the tree.
       As of npm v7, peerDependencies _a_r_e installed by default.

       Trying  to install another plugin with a conflicting requirement may cause an error if the tree cannot be resolved correctly. For this reason, make sure your plugin require‐
       ment is as broad as possible, and not to lock it down to specific patch versions.

       Assuming the host complies with sseemmvveerr _⟨_h_t_t_p_s_:_/_/_s_e_m_v_e_r_._o_r_g_/_⟩, only changes in the host package's major version will break your plugin. Thus, if you've worked with every  1.x
       version of the host package, use ""^^11..00"" or ""11..xx"" to express this. If you depend on features introduced in 1.5.2, use ""^^11..55..22"".

   ppeeeerrDDeeppeennddeenncciieessMMeettaa
       The ppeeeerrDDeeppeennddeenncciieessMMeettaa field serves to provide npm more information on how your peer dependencies are to be used. Specifically, it allows peer dependencies to be marked as
       optional. Npm will not automatically install optional peer dependencies. This allows you to integrate and interact with a variety of host packages without requiring  all  of
       them to be installed.

       For example:

         {
           "name": "tea-latte",
           "version": "1.3.5",
           "peerDependencies": {
             "tea": "2.x",
             "soy-milk": "1.2"
           },
           "peerDependenciesMeta": {
             "soy-milk": {
               "optional": true
             }
           }
         }

   bbuunnddlleeDDeeppeennddeenncciieess
       This defines an array of package names that will be bundled when publishing the package.

       In  cases  where you need to preserve npm packages locally or have them available through a single file download, you can bundle the packages in a tarball file by specifying
       the package names in the bbuunnddlleeDDeeppeennddeenncciieess array and executing nnppmm ppaacckk.

       For example:

       If we define a package.json like this:

         {
           "name": "awesome-web-framework",
           "version": "1.0.0",
           "bundleDependencies": [
             "renderized",
             "super-streams"
           ]
         }

       we can obtain aawweessoommee--wweebb--ffrraammeewwoorrkk--11..00..00..ttggzz file by running nnppmm ppaacckk. This file contains the dependencies rreennddeerriizzeedd and ssuuppeerr--ssttrreeaammss which can  be  installed  in  a  new
       project by executing nnppmm iinnssttaallll aawweessoommee--wweebb--ffrraammeewwoorrkk--11..00..00..ttggzz. Note that the package names do not include any versions, as that information is specified in ddeeppeennddeenncciieess.

       If this is spelled ""bbuunnddlleeddDDeeppeennddeenncciieess"", then that is also honored.

       Alternatively, ""bbuunnddlleeDDeeppeennddeenncciieess"" can be defined as a boolean value. A value of ttrruuee will bundle all dependencies, a value of ffaallssee will bundle none.

   ooppttiioonnaallDDeeppeennddeenncciieess
       If  a  dependency can be used, but you would like npm to proceed if it cannot be found or fails to install, then you may put it in the ooppttiioonnaallDDeeppeennddeenncciieess object. This is a
       map of package name to version or URL, just like the ddeeppeennddeenncciieess object. The difference is that build failures do not  cause  installation  to  fail.  Running  nnppmm  iinnssttaallll
       ----oommiitt==ooppttiioonnaall will prevent these dependencies from being installed.

       It is still your program's responsibility to handle the lack of the dependency. For example, something like this:

         try {
           var foo = require('foo')
           var fooVersion = require('foo/package.json').version
         } catch (er) {
           foo = null
         }
         if ( notGoodFooVersion(fooVersion) ) {
           foo = null
         }

         // .. then later in your program ..

         if (foo) {
           foo.doFooThings()
         }

       Entries in ooppttiioonnaallDDeeppeennddeenncciieess will override entries of the same name in ddeeppeennddeenncciieess, so it's usually best to only put in one place.

   oovveerrrriiddeess
       If you need to make specific changes to dependencies of your dependencies, for example replacing the version of a dependency with a known security issue, replacing an exist‐
       ing dependency with a fork, or making sure that the same version of a package is used everywhere, then you may add an override.

       Overrides provide a way to replace a package in your dependency tree with another version, or another package entirely. These changes can be scoped as specific or  as  vague
       as desired.

       Overrides  are  only considered in the root ppaacckkaaggee..jjssoonn file for a project. Overrides in installed dependencies (including npm help workspaces) are not considered in depen‐
       dency tree resolution. Published packages may dictate their resolutions by pinning dependencies or using an nnppmm--sshhrriinnkkwwrraapp..jjssoonn _⟨_/_c_o_n_f_i_g_u_r_i_n_g_-_n_p_m_/_n_p_m_-_s_h_r_i_n_k_w_r_a_p_-_j_s_o_n_⟩ file.

       To make sure the package ffoooo is always installed as version 11..00..00 no matter what version your dependencies rely on:

         {
           "overrides": {
             "foo": "1.0.0"
           }
         }

       The above is a short hand notation, the full object form can be used to allow overriding a package itself as well as a child of the package. This will cause ffoooo to always be
       11..00..00 while also making bbaarr at any depth beyond ffoooo also 11..00..00:

         {
           "overrides": {
             "foo": {
               ".": "1.0.0",
               "bar": "1.0.0"
             }
           }
         }

       To only override ffoooo to be 11..00..00 when it's a child (or grandchild, or great grandchild, etc) of the package bbaarr:

         {
           "overrides": {
             "bar": {
               "foo": "1.0.0"
             }
           }
         }

       Keys can be nested to any arbitrary length. To override ffoooo only when it's a child of bbaarr and only when bbaarr is a child of bbaazz:

         {
           "overrides": {
             "baz": {
               "bar": {
                 "foo": "1.0.0"
               }
             }
           }
         }

       The key of an override can also include a version, or range of versions. To override ffoooo to 11..00..00, but only when it's a child of bbaarr@@22..00..00:

         {
           "overrides": {
             "bar@2.0.0": {
               "foo": "1.0.0"
             }
           }
         }

       You  may  not set an override for a package that you directly depend on unless both the dependency and the override itself share the exact same spec. To make this limitation
       easier to deal with, overrides may also be defined as a reference to a spec for a direct dependency by prefixing the name of the package you wish the version to match with a
       $$.

         {
           "dependencies": {
             "foo": "^1.0.0"
           },
           "overrides": {
             // BAD, will throw an EOVERRIDE error
             // "foo": "^2.0.0"
             // GOOD, specs match so override is allowed
             // "foo": "^1.0.0"
             // BEST, the override is defined as a reference to the dependency
             "foo": "$foo",
             // the referenced package does not need to match the overridden one
             "bar": "$foo"
           }
         }

   eennggiinneess
       You can specify the version of node that your stuff works on:

         {
           "engines": {
             "node": ">=0.10.3 <15"
           }
         }

       And, like with dependencies, if you don't specify the version (or if you specify "*" as the version), then any version of node will do.

       You can also use the "engines" field to specify which versions of npm are capable of properly installing your program. For example:

         {
           "engines": {
             "npm": "~1.0.20"
           }
         }

       Unless  the user has set the eennggiinnee--ssttrriicctt config _⟨_/_u_s_i_n_g_-_n_p_m_/_c_o_n_f_i_g_#_e_n_g_i_n_e_-_s_t_r_i_c_t_⟩ flag, this field is advisory only and will only produce warnings when your package is in‐
       stalled as a dependency.

   ooss
       You can specify which operating systems your module will run on:

         {
           "os": [
             "darwin",
             "linux"
           ]
         }

       You can also block instead of allowing operating systems, just prepend the blocked os with a '!':

         {
           "os": [
             "!win32"
           ]
         }

       The host operating system is determined by pprroocceessss..ppllaattffoorrmm

       It is allowed to both block and allow an item, although there isn't any good reason to do this.

   ccppuu
       If your code only runs on certain cpu architectures, you can specify which ones.

         {
           "cpu": [
             "x64",
             "ia32"
           ]
         }

       Like the ooss option, you can also block architectures:

         {
           "cpu": [
             "!arm",
             "!mips"
           ]
         }

       The host architecture is determined by pprroocceessss..aarrcchh

   pprriivvaattee
       If you set ""pprriivvaattee"":: ttrruuee in your package.json, then npm will refuse to publish it.

       This is a way to prevent accidental publication of private repositories. If you would like to ensure that a given package is only ever published to a specific registry  (for
       example, an internal registry), then use the ppuubblliisshhCCoonnffiigg dictionary described below to override the rreeggiissttrryy config param at publish-time.

   ppuubblliisshhCCoonnffiigg
       This  is  a set of config values that will be used at publish-time. It's especially handy if you want to set the tag, registry or access, so that you can ensure that a given
       package is not tagged with "latest", published to the global public registry or that a scoped module is private by default.

       See npm help config to see the list of config options that can be overridden.

   wwoorrkkssppaacceess
       The optional wwoorrkkssppaacceess field is an array of file patterns that describes locations within the local file system that the install client should look up to find each npm help
       workspace that needs to be symlinked to the top level nnooddee__mmoodduulleess folder.

       It can describe either the direct paths of the folders to be used as workspaces or it can define globs that will resolve to these same folders.

       In the following example, all folders located inside the folder ..//ppaacckkaaggeess will be treated as workspaces as long as they have valid ppaacckkaaggee..jjssoonn files inside them:

         {
           "name": "workspace-example",
           "workspaces": [
             "./packages/*"
           ]
         }

       See npm help workspaces for more examples.

   DDEEFFAAUULLTT VVAALLUUEESS
       npm will default some values based on package contents.

       •   ""ssccrriippttss"":: {{""ssttaarrtt"":: ""nnooddee sseerrvveerr..jjss""}}

       If there is a sseerrvveerr..jjss file in the root of your package, then npm will default the ssttaarrtt command to nnooddee sseerrvveerr..jjss.

       •   ""ssccrriippttss""::{{""iinnssttaallll"":: ""nnooddee--ggyypp rreebbuuiilldd""}}

       If  there  is  a bbiinnddiinngg..ggyypp file in the root of your package and you have not defined an iinnssttaallll or pprreeiinnssttaallll script, npm will default the iinnssttaallll command to compile using
       node-gyp.

       •   ""ccoonnttrriibbuuttoorrss"":: [[......]]

       If there is an AAUUTTHHOORRSS file in the root of your package, npm will treat each line as a NNaammee <<eemmaaiill>> ((uurrll)) format, where email and url are optional. Lines which start with  a
       ## or are blank, will be ignored.

   SSEEEE AALLSSOO
       •   sseemmvveerr _⟨_h_t_t_p_s_:_/_/_g_i_t_h_u_b_._c_o_m_/_n_p_m_/_n_o_d_e_-_s_e_m_v_e_r_#_v_e_r_s_i_o_n_s_⟩

       •   npm help workspaces

       •   npm help init

       •   npm help version

       •   npm help config

       •   npm help help

       •   npm help install

       •   npm help publish

       •   npm help uninstall

NPM@10.8.1                                                                            May 2024                                                                       PACKAGE.JSON(5)
